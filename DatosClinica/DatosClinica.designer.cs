#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatosClinica
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Clinica")]
	public partial class DatosClinicaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertAlergias(Alergias instance);
    partial void UpdateAlergias(Alergias instance);
    partial void DeleteAlergias(Alergias instance);
    partial void InsertEnfermedades(Enfermedades instance);
    partial void UpdateEnfermedades(Enfermedades instance);
    partial void DeleteEnfermedades(Enfermedades instance);
    partial void InsertFactura(Factura instance);
    partial void UpdateFactura(Factura instance);
    partial void DeleteFactura(Factura instance);
    partial void InsertMedicamento(Medicamento instance);
    partial void UpdateMedicamento(Medicamento instance);
    partial void DeleteMedicamento(Medicamento instance);
    partial void InsertOdontogramaPieza(OdontogramaPieza instance);
    partial void UpdateOdontogramaPieza(OdontogramaPieza instance);
    partial void DeleteOdontogramaPieza(OdontogramaPieza instance);
    partial void InsertPaciente(Paciente instance);
    partial void UpdatePaciente(Paciente instance);
    partial void DeletePaciente(Paciente instance);
    partial void InsertReceta(Receta instance);
    partial void UpdateReceta(Receta instance);
    partial void DeleteReceta(Receta instance);
    partial void InsertRecetaMedicamento(RecetaMedicamento instance);
    partial void UpdateRecetaMedicamento(RecetaMedicamento instance);
    partial void DeleteRecetaMedicamento(RecetaMedicamento instance);
    partial void InsertTratamiento(Tratamiento instance);
    partial void UpdateTratamiento(Tratamiento instance);
    partial void DeleteTratamiento(Tratamiento instance);
    partial void InsertTratamientoFactura(TratamientoFactura instance);
    partial void UpdateTratamientoFactura(TratamientoFactura instance);
    partial void DeleteTratamientoFactura(TratamientoFactura instance);
    partial void InsertTratamientoPaciente(TratamientoPaciente instance);
    partial void UpdateTratamientoPaciente(TratamientoPaciente instance);
    partial void DeleteTratamientoPaciente(TratamientoPaciente instance);
    partial void InsertUsuario(Usuario instance);
    partial void UpdateUsuario(Usuario instance);
    partial void DeleteUsuario(Usuario instance);
    #endregion
		
		public DatosClinicaDataContext() : 
				base(global::DatosClinica.Properties.Settings.Default.ClinicaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatosClinicaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatosClinicaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatosClinicaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatosClinicaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Alergias> Alergias
		{
			get
			{
				return this.GetTable<Alergias>();
			}
		}
		
		public System.Data.Linq.Table<Enfermedades> Enfermedades
		{
			get
			{
				return this.GetTable<Enfermedades>();
			}
		}
		
		public System.Data.Linq.Table<Factura> Factura
		{
			get
			{
				return this.GetTable<Factura>();
			}
		}
		
		public System.Data.Linq.Table<Medicamento> Medicamento
		{
			get
			{
				return this.GetTable<Medicamento>();
			}
		}
		
		public System.Data.Linq.Table<OdontogramaPieza> OdontogramaPieza
		{
			get
			{
				return this.GetTable<OdontogramaPieza>();
			}
		}
		
		public System.Data.Linq.Table<Paciente> Paciente
		{
			get
			{
				return this.GetTable<Paciente>();
			}
		}
		
		public System.Data.Linq.Table<Receta> Receta
		{
			get
			{
				return this.GetTable<Receta>();
			}
		}
		
		public System.Data.Linq.Table<RecetaMedicamento> RecetaMedicamento
		{
			get
			{
				return this.GetTable<RecetaMedicamento>();
			}
		}
		
		public System.Data.Linq.Table<Tratamiento> Tratamiento
		{
			get
			{
				return this.GetTable<Tratamiento>();
			}
		}
		
		public System.Data.Linq.Table<TratamientoFactura> TratamientoFactura
		{
			get
			{
				return this.GetTable<TratamientoFactura>();
			}
		}
		
		public System.Data.Linq.Table<TratamientoPaciente> TratamientoPaciente
		{
			get
			{
				return this.GetTable<TratamientoPaciente>();
			}
		}
		
		public System.Data.Linq.Table<Usuario> Usuario
		{
			get
			{
				return this.GetTable<Usuario>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Alergias")]
	public partial class Alergias : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdAlergias;
		
		private int _IdPaciente;
		
		private string _Alergia;
		
		private EntityRef<Paciente> _Paciente;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdAlergiasChanging(int value);
    partial void OnIdAlergiasChanged();
    partial void OnIdPacienteChanging(int value);
    partial void OnIdPacienteChanged();
    partial void OnAlergiaChanging(string value);
    partial void OnAlergiaChanged();
    #endregion
		
		public Alergias()
		{
			this._Paciente = default(EntityRef<Paciente>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAlergias", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdAlergias
		{
			get
			{
				return this._IdAlergias;
			}
			set
			{
				if ((this._IdAlergias != value))
				{
					this.OnIdAlergiasChanging(value);
					this.SendPropertyChanging();
					this._IdAlergias = value;
					this.SendPropertyChanged("IdAlergias");
					this.OnIdAlergiasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPaciente", DbType="Int NOT NULL")]
		public int IdPaciente
		{
			get
			{
				return this._IdPaciente;
			}
			set
			{
				if ((this._IdPaciente != value))
				{
					if (this._Paciente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPacienteChanging(value);
					this.SendPropertyChanging();
					this._IdPaciente = value;
					this.SendPropertyChanged("IdPaciente");
					this.OnIdPacienteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alergia", DbType="VarChar(100)")]
		public string Alergia
		{
			get
			{
				return this._Alergia;
			}
			set
			{
				if ((this._Alergia != value))
				{
					this.OnAlergiaChanging(value);
					this.SendPropertyChanging();
					this._Alergia = value;
					this.SendPropertyChanged("Alergia");
					this.OnAlergiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_Alergias", Storage="_Paciente", ThisKey="IdPaciente", OtherKey="IdPaciente", IsForeignKey=true)]
		public Paciente Paciente
		{
			get
			{
				return this._Paciente.Entity;
			}
			set
			{
				Paciente previousValue = this._Paciente.Entity;
				if (((previousValue != value) 
							|| (this._Paciente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Paciente.Entity = null;
						previousValue.Alergias.Remove(this);
					}
					this._Paciente.Entity = value;
					if ((value != null))
					{
						value.Alergias.Add(this);
						this._IdPaciente = value.IdPaciente;
					}
					else
					{
						this._IdPaciente = default(int);
					}
					this.SendPropertyChanged("Paciente");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Enfermedades")]
	public partial class Enfermedades : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdAlergias;
		
		private int _IdPaciente;
		
		private string _Enfermedad;
		
		private EntityRef<Paciente> _Paciente;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdAlergiasChanging(int value);
    partial void OnIdAlergiasChanged();
    partial void OnIdPacienteChanging(int value);
    partial void OnIdPacienteChanged();
    partial void OnEnfermedadChanging(string value);
    partial void OnEnfermedadChanged();
    #endregion
		
		public Enfermedades()
		{
			this._Paciente = default(EntityRef<Paciente>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAlergias", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdAlergias
		{
			get
			{
				return this._IdAlergias;
			}
			set
			{
				if ((this._IdAlergias != value))
				{
					this.OnIdAlergiasChanging(value);
					this.SendPropertyChanging();
					this._IdAlergias = value;
					this.SendPropertyChanged("IdAlergias");
					this.OnIdAlergiasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPaciente", DbType="Int NOT NULL")]
		public int IdPaciente
		{
			get
			{
				return this._IdPaciente;
			}
			set
			{
				if ((this._IdPaciente != value))
				{
					if (this._Paciente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPacienteChanging(value);
					this.SendPropertyChanging();
					this._IdPaciente = value;
					this.SendPropertyChanged("IdPaciente");
					this.OnIdPacienteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enfermedad", DbType="VarChar(100)")]
		public string Enfermedad
		{
			get
			{
				return this._Enfermedad;
			}
			set
			{
				if ((this._Enfermedad != value))
				{
					this.OnEnfermedadChanging(value);
					this.SendPropertyChanging();
					this._Enfermedad = value;
					this.SendPropertyChanged("Enfermedad");
					this.OnEnfermedadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_Enfermedades", Storage="_Paciente", ThisKey="IdPaciente", OtherKey="IdPaciente", IsForeignKey=true)]
		public Paciente Paciente
		{
			get
			{
				return this._Paciente.Entity;
			}
			set
			{
				Paciente previousValue = this._Paciente.Entity;
				if (((previousValue != value) 
							|| (this._Paciente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Paciente.Entity = null;
						previousValue.Enfermedades.Remove(this);
					}
					this._Paciente.Entity = value;
					if ((value != null))
					{
						value.Enfermedades.Add(this);
						this._IdPaciente = value.IdPaciente;
					}
					else
					{
						this._IdPaciente = default(int);
					}
					this.SendPropertyChanged("Paciente");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Factura")]
	public partial class Factura : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdFactura;
		
		private int _IdPaciente;
		
		private System.Nullable<decimal> _Subtotal;
		
		private System.Nullable<decimal> _Iva;
		
		private System.Nullable<decimal> _Total;
		
		private EntitySet<TratamientoFactura> _TratamientoFactura;
		
		private EntityRef<Paciente> _Paciente;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdFacturaChanging(int value);
    partial void OnIdFacturaChanged();
    partial void OnIdPacienteChanging(int value);
    partial void OnIdPacienteChanged();
    partial void OnSubtotalChanging(System.Nullable<decimal> value);
    partial void OnSubtotalChanged();
    partial void OnIvaChanging(System.Nullable<decimal> value);
    partial void OnIvaChanged();
    partial void OnTotalChanging(System.Nullable<decimal> value);
    partial void OnTotalChanged();
    #endregion
		
		public Factura()
		{
			this._TratamientoFactura = new EntitySet<TratamientoFactura>(new Action<TratamientoFactura>(this.attach_TratamientoFactura), new Action<TratamientoFactura>(this.detach_TratamientoFactura));
			this._Paciente = default(EntityRef<Paciente>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdFactura", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdFactura
		{
			get
			{
				return this._IdFactura;
			}
			set
			{
				if ((this._IdFactura != value))
				{
					this.OnIdFacturaChanging(value);
					this.SendPropertyChanging();
					this._IdFactura = value;
					this.SendPropertyChanged("IdFactura");
					this.OnIdFacturaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPaciente", DbType="Int NOT NULL")]
		public int IdPaciente
		{
			get
			{
				return this._IdPaciente;
			}
			set
			{
				if ((this._IdPaciente != value))
				{
					if (this._Paciente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPacienteChanging(value);
					this.SendPropertyChanging();
					this._IdPaciente = value;
					this.SendPropertyChanged("IdPaciente");
					this.OnIdPacienteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subtotal", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Subtotal
		{
			get
			{
				return this._Subtotal;
			}
			set
			{
				if ((this._Subtotal != value))
				{
					this.OnSubtotalChanging(value);
					this.SendPropertyChanging();
					this._Subtotal = value;
					this.SendPropertyChanged("Subtotal");
					this.OnSubtotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Iva", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Iva
		{
			get
			{
				return this._Iva;
			}
			set
			{
				if ((this._Iva != value))
				{
					this.OnIvaChanging(value);
					this.SendPropertyChanging();
					this._Iva = value;
					this.SendPropertyChanged("Iva");
					this.OnIvaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Factura_TratamientoFactura", Storage="_TratamientoFactura", ThisKey="IdFactura", OtherKey="IdFactura")]
		public EntitySet<TratamientoFactura> TratamientoFactura
		{
			get
			{
				return this._TratamientoFactura;
			}
			set
			{
				this._TratamientoFactura.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_Factura", Storage="_Paciente", ThisKey="IdPaciente", OtherKey="IdPaciente", IsForeignKey=true)]
		public Paciente Paciente
		{
			get
			{
				return this._Paciente.Entity;
			}
			set
			{
				Paciente previousValue = this._Paciente.Entity;
				if (((previousValue != value) 
							|| (this._Paciente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Paciente.Entity = null;
						previousValue.Factura.Remove(this);
					}
					this._Paciente.Entity = value;
					if ((value != null))
					{
						value.Factura.Add(this);
						this._IdPaciente = value.IdPaciente;
					}
					else
					{
						this._IdPaciente = default(int);
					}
					this.SendPropertyChanged("Paciente");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TratamientoFactura(TratamientoFactura entity)
		{
			this.SendPropertyChanging();
			entity.Factura = this;
		}
		
		private void detach_TratamientoFactura(TratamientoFactura entity)
		{
			this.SendPropertyChanging();
			entity.Factura = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicamento")]
	public partial class Medicamento : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdMedicamento;
		
		private string _Medicamento1;
		
		private string _Presentacion;
		
		private string _Medida;
		
		private EntitySet<RecetaMedicamento> _RecetaMedicamento;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdMedicamentoChanging(int value);
    partial void OnIdMedicamentoChanged();
    partial void OnMedicamento1Changing(string value);
    partial void OnMedicamento1Changed();
    partial void OnPresentacionChanging(string value);
    partial void OnPresentacionChanged();
    partial void OnMedidaChanging(string value);
    partial void OnMedidaChanged();
    #endregion
		
		public Medicamento()
		{
			this._RecetaMedicamento = new EntitySet<RecetaMedicamento>(new Action<RecetaMedicamento>(this.attach_RecetaMedicamento), new Action<RecetaMedicamento>(this.detach_RecetaMedicamento));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdMedicamento", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdMedicamento
		{
			get
			{
				return this._IdMedicamento;
			}
			set
			{
				if ((this._IdMedicamento != value))
				{
					this.OnIdMedicamentoChanging(value);
					this.SendPropertyChanging();
					this._IdMedicamento = value;
					this.SendPropertyChanged("IdMedicamento");
					this.OnIdMedicamentoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Medicamento", Storage="_Medicamento1", DbType="VarChar(100)")]
		public string Medicamento1
		{
			get
			{
				return this._Medicamento1;
			}
			set
			{
				if ((this._Medicamento1 != value))
				{
					this.OnMedicamento1Changing(value);
					this.SendPropertyChanging();
					this._Medicamento1 = value;
					this.SendPropertyChanged("Medicamento1");
					this.OnMedicamento1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Presentacion", DbType="VarChar(50)")]
		public string Presentacion
		{
			get
			{
				return this._Presentacion;
			}
			set
			{
				if ((this._Presentacion != value))
				{
					this.OnPresentacionChanging(value);
					this.SendPropertyChanging();
					this._Presentacion = value;
					this.SendPropertyChanged("Presentacion");
					this.OnPresentacionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medida", DbType="VarChar(100)")]
		public string Medida
		{
			get
			{
				return this._Medida;
			}
			set
			{
				if ((this._Medida != value))
				{
					this.OnMedidaChanging(value);
					this.SendPropertyChanging();
					this._Medida = value;
					this.SendPropertyChanged("Medida");
					this.OnMedidaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicamento_RecetaMedicamento", Storage="_RecetaMedicamento", ThisKey="IdMedicamento", OtherKey="IdIdMedicamento")]
		public EntitySet<RecetaMedicamento> RecetaMedicamento
		{
			get
			{
				return this._RecetaMedicamento;
			}
			set
			{
				this._RecetaMedicamento.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RecetaMedicamento(RecetaMedicamento entity)
		{
			this.SendPropertyChanging();
			entity.Medicamento = this;
		}
		
		private void detach_RecetaMedicamento(RecetaMedicamento entity)
		{
			this.SendPropertyChanging();
			entity.Medicamento = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OdontogramaPieza")]
	public partial class OdontogramaPieza : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdOdontoPieza;
		
		private int _IdPaciente;
		
		private System.Nullable<int> _IdOdontograma;
		
		private System.Nullable<int> _Pieza;
		
		private System.Nullable<bool> _Partea;
		
		private System.Nullable<bool> _Parteb;
		
		private System.Nullable<bool> _Partec;
		
		private System.Nullable<bool> _Parted;
		
		private System.Nullable<bool> _Partee;
		
		private EntityRef<Paciente> _Paciente;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdOdontoPiezaChanging(int value);
    partial void OnIdOdontoPiezaChanged();
    partial void OnIdPacienteChanging(int value);
    partial void OnIdPacienteChanged();
    partial void OnIdOdontogramaChanging(System.Nullable<int> value);
    partial void OnIdOdontogramaChanged();
    partial void OnPiezaChanging(System.Nullable<int> value);
    partial void OnPiezaChanged();
    partial void OnParteaChanging(System.Nullable<bool> value);
    partial void OnParteaChanged();
    partial void OnPartebChanging(System.Nullable<bool> value);
    partial void OnPartebChanged();
    partial void OnPartecChanging(System.Nullable<bool> value);
    partial void OnPartecChanged();
    partial void OnPartedChanging(System.Nullable<bool> value);
    partial void OnPartedChanged();
    partial void OnParteeChanging(System.Nullable<bool> value);
    partial void OnParteeChanged();
    #endregion
		
		public OdontogramaPieza()
		{
			this._Paciente = default(EntityRef<Paciente>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdOdontoPieza", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdOdontoPieza
		{
			get
			{
				return this._IdOdontoPieza;
			}
			set
			{
				if ((this._IdOdontoPieza != value))
				{
					this.OnIdOdontoPiezaChanging(value);
					this.SendPropertyChanging();
					this._IdOdontoPieza = value;
					this.SendPropertyChanged("IdOdontoPieza");
					this.OnIdOdontoPiezaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPaciente", DbType="Int NOT NULL")]
		public int IdPaciente
		{
			get
			{
				return this._IdPaciente;
			}
			set
			{
				if ((this._IdPaciente != value))
				{
					if (this._Paciente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPacienteChanging(value);
					this.SendPropertyChanging();
					this._IdPaciente = value;
					this.SendPropertyChanged("IdPaciente");
					this.OnIdPacienteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdOdontograma", DbType="Int")]
		public System.Nullable<int> IdOdontograma
		{
			get
			{
				return this._IdOdontograma;
			}
			set
			{
				if ((this._IdOdontograma != value))
				{
					this.OnIdOdontogramaChanging(value);
					this.SendPropertyChanging();
					this._IdOdontograma = value;
					this.SendPropertyChanged("IdOdontograma");
					this.OnIdOdontogramaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pieza", DbType="Int")]
		public System.Nullable<int> Pieza
		{
			get
			{
				return this._Pieza;
			}
			set
			{
				if ((this._Pieza != value))
				{
					this.OnPiezaChanging(value);
					this.SendPropertyChanging();
					this._Pieza = value;
					this.SendPropertyChanged("Pieza");
					this.OnPiezaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Partea", DbType="Bit")]
		public System.Nullable<bool> Partea
		{
			get
			{
				return this._Partea;
			}
			set
			{
				if ((this._Partea != value))
				{
					this.OnParteaChanging(value);
					this.SendPropertyChanging();
					this._Partea = value;
					this.SendPropertyChanged("Partea");
					this.OnParteaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parteb", DbType="Bit")]
		public System.Nullable<bool> Parteb
		{
			get
			{
				return this._Parteb;
			}
			set
			{
				if ((this._Parteb != value))
				{
					this.OnPartebChanging(value);
					this.SendPropertyChanging();
					this._Parteb = value;
					this.SendPropertyChanged("Parteb");
					this.OnPartebChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Partec", DbType="Bit")]
		public System.Nullable<bool> Partec
		{
			get
			{
				return this._Partec;
			}
			set
			{
				if ((this._Partec != value))
				{
					this.OnPartecChanging(value);
					this.SendPropertyChanging();
					this._Partec = value;
					this.SendPropertyChanged("Partec");
					this.OnPartecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parted", DbType="Bit")]
		public System.Nullable<bool> Parted
		{
			get
			{
				return this._Parted;
			}
			set
			{
				if ((this._Parted != value))
				{
					this.OnPartedChanging(value);
					this.SendPropertyChanging();
					this._Parted = value;
					this.SendPropertyChanged("Parted");
					this.OnPartedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Partee", DbType="Bit")]
		public System.Nullable<bool> Partee
		{
			get
			{
				return this._Partee;
			}
			set
			{
				if ((this._Partee != value))
				{
					this.OnParteeChanging(value);
					this.SendPropertyChanging();
					this._Partee = value;
					this.SendPropertyChanged("Partee");
					this.OnParteeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_OdontogramaPieza", Storage="_Paciente", ThisKey="IdPaciente", OtherKey="IdPaciente", IsForeignKey=true)]
		public Paciente Paciente
		{
			get
			{
				return this._Paciente.Entity;
			}
			set
			{
				Paciente previousValue = this._Paciente.Entity;
				if (((previousValue != value) 
							|| (this._Paciente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Paciente.Entity = null;
						previousValue.OdontogramaPieza.Remove(this);
					}
					this._Paciente.Entity = value;
					if ((value != null))
					{
						value.OdontogramaPieza.Add(this);
						this._IdPaciente = value.IdPaciente;
					}
					else
					{
						this._IdPaciente = default(int);
					}
					this.SendPropertyChanged("Paciente");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Paciente")]
	public partial class Paciente : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdPaciente;
		
		private System.Nullable<System.DateTime> _FechaIngreso;
		
		private string _Nombre;
		
		private string _Apellido;
		
		private string _Cedula;
		
		private string _Direccion;
		
		private System.Nullable<int> _Telefono1;
		
		private System.Nullable<int> _Telefono2;
		
		private string _Correo;
		
		private System.Nullable<System.DateTime> _FechaCita;
		
		private string _Genero;
		
		private System.Data.Linq.Binary _FotoDePerfil;
		
		private System.Nullable<System.DateTime> _FechaDeNacimiento;
		
		private EntitySet<Alergias> _Alergias;
		
		private EntitySet<Enfermedades> _Enfermedades;
		
		private EntitySet<Factura> _Factura;
		
		private EntitySet<OdontogramaPieza> _OdontogramaPieza;
		
		private EntitySet<Receta> _Receta;
		
		private EntitySet<TratamientoPaciente> _TratamientoPaciente;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdPacienteChanging(int value);
    partial void OnIdPacienteChanged();
    partial void OnFechaIngresoChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaIngresoChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnApellidoChanging(string value);
    partial void OnApellidoChanged();
    partial void OnCedulaChanging(string value);
    partial void OnCedulaChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    partial void OnTelefono1Changing(System.Nullable<int> value);
    partial void OnTelefono1Changed();
    partial void OnTelefono2Changing(System.Nullable<int> value);
    partial void OnTelefono2Changed();
    partial void OnCorreoChanging(string value);
    partial void OnCorreoChanged();
    partial void OnFechaCitaChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaCitaChanged();
    partial void OnGeneroChanging(string value);
    partial void OnGeneroChanged();
    partial void OnFotoDePerfilChanging(System.Data.Linq.Binary value);
    partial void OnFotoDePerfilChanged();
    partial void OnFechaDeNacimientoChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaDeNacimientoChanged();
    #endregion
		
		public Paciente()
		{
			this._Alergias = new EntitySet<Alergias>(new Action<Alergias>(this.attach_Alergias), new Action<Alergias>(this.detach_Alergias));
			this._Enfermedades = new EntitySet<Enfermedades>(new Action<Enfermedades>(this.attach_Enfermedades), new Action<Enfermedades>(this.detach_Enfermedades));
			this._Factura = new EntitySet<Factura>(new Action<Factura>(this.attach_Factura), new Action<Factura>(this.detach_Factura));
			this._OdontogramaPieza = new EntitySet<OdontogramaPieza>(new Action<OdontogramaPieza>(this.attach_OdontogramaPieza), new Action<OdontogramaPieza>(this.detach_OdontogramaPieza));
			this._Receta = new EntitySet<Receta>(new Action<Receta>(this.attach_Receta), new Action<Receta>(this.detach_Receta));
			this._TratamientoPaciente = new EntitySet<TratamientoPaciente>(new Action<TratamientoPaciente>(this.attach_TratamientoPaciente), new Action<TratamientoPaciente>(this.detach_TratamientoPaciente));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPaciente", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdPaciente
		{
			get
			{
				return this._IdPaciente;
			}
			set
			{
				if ((this._IdPaciente != value))
				{
					this.OnIdPacienteChanging(value);
					this.SendPropertyChanging();
					this._IdPaciente = value;
					this.SendPropertyChanged("IdPaciente");
					this.OnIdPacienteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaIngreso", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaIngreso
		{
			get
			{
				return this._FechaIngreso;
			}
			set
			{
				if ((this._FechaIngreso != value))
				{
					this.OnFechaIngresoChanging(value);
					this.SendPropertyChanging();
					this._FechaIngreso = value;
					this.SendPropertyChanged("FechaIngreso");
					this.OnFechaIngresoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(50)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apellido", DbType="VarChar(50)")]
		public string Apellido
		{
			get
			{
				return this._Apellido;
			}
			set
			{
				if ((this._Apellido != value))
				{
					this.OnApellidoChanging(value);
					this.SendPropertyChanging();
					this._Apellido = value;
					this.SendPropertyChanged("Apellido");
					this.OnApellidoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cedula", DbType="VarChar(50)")]
		public string Cedula
		{
			get
			{
				return this._Cedula;
			}
			set
			{
				if ((this._Cedula != value))
				{
					this.OnCedulaChanging(value);
					this.SendPropertyChanging();
					this._Cedula = value;
					this.SendPropertyChanged("Cedula");
					this.OnCedulaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direccion", DbType="VarChar(150)")]
		public string Direccion
		{
			get
			{
				return this._Direccion;
			}
			set
			{
				if ((this._Direccion != value))
				{
					this.OnDireccionChanging(value);
					this.SendPropertyChanging();
					this._Direccion = value;
					this.SendPropertyChanged("Direccion");
					this.OnDireccionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefono1", DbType="Int")]
		public System.Nullable<int> Telefono1
		{
			get
			{
				return this._Telefono1;
			}
			set
			{
				if ((this._Telefono1 != value))
				{
					this.OnTelefono1Changing(value);
					this.SendPropertyChanging();
					this._Telefono1 = value;
					this.SendPropertyChanged("Telefono1");
					this.OnTelefono1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefono2", DbType="Int")]
		public System.Nullable<int> Telefono2
		{
			get
			{
				return this._Telefono2;
			}
			set
			{
				if ((this._Telefono2 != value))
				{
					this.OnTelefono2Changing(value);
					this.SendPropertyChanging();
					this._Telefono2 = value;
					this.SendPropertyChanged("Telefono2");
					this.OnTelefono2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Correo", DbType="VarChar(50)")]
		public string Correo
		{
			get
			{
				return this._Correo;
			}
			set
			{
				if ((this._Correo != value))
				{
					this.OnCorreoChanging(value);
					this.SendPropertyChanging();
					this._Correo = value;
					this.SendPropertyChanged("Correo");
					this.OnCorreoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaCita", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaCita
		{
			get
			{
				return this._FechaCita;
			}
			set
			{
				if ((this._FechaCita != value))
				{
					this.OnFechaCitaChanging(value);
					this.SendPropertyChanging();
					this._FechaCita = value;
					this.SendPropertyChanged("FechaCita");
					this.OnFechaCitaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genero", DbType="VarChar(50)")]
		public string Genero
		{
			get
			{
				return this._Genero;
			}
			set
			{
				if ((this._Genero != value))
				{
					this.OnGeneroChanging(value);
					this.SendPropertyChanging();
					this._Genero = value;
					this.SendPropertyChanged("Genero");
					this.OnGeneroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FotoDePerfil", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary FotoDePerfil
		{
			get
			{
				return this._FotoDePerfil;
			}
			set
			{
				if ((this._FotoDePerfil != value))
				{
					this.OnFotoDePerfilChanging(value);
					this.SendPropertyChanging();
					this._FotoDePerfil = value;
					this.SendPropertyChanged("FotoDePerfil");
					this.OnFotoDePerfilChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaDeNacimiento", DbType="Date")]
		public System.Nullable<System.DateTime> FechaDeNacimiento
		{
			get
			{
				return this._FechaDeNacimiento;
			}
			set
			{
				if ((this._FechaDeNacimiento != value))
				{
					this.OnFechaDeNacimientoChanging(value);
					this.SendPropertyChanging();
					this._FechaDeNacimiento = value;
					this.SendPropertyChanged("FechaDeNacimiento");
					this.OnFechaDeNacimientoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_Alergias", Storage="_Alergias", ThisKey="IdPaciente", OtherKey="IdPaciente")]
		public EntitySet<Alergias> Alergias
		{
			get
			{
				return this._Alergias;
			}
			set
			{
				this._Alergias.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_Enfermedades", Storage="_Enfermedades", ThisKey="IdPaciente", OtherKey="IdPaciente")]
		public EntitySet<Enfermedades> Enfermedades
		{
			get
			{
				return this._Enfermedades;
			}
			set
			{
				this._Enfermedades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_Factura", Storage="_Factura", ThisKey="IdPaciente", OtherKey="IdPaciente")]
		public EntitySet<Factura> Factura
		{
			get
			{
				return this._Factura;
			}
			set
			{
				this._Factura.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_OdontogramaPieza", Storage="_OdontogramaPieza", ThisKey="IdPaciente", OtherKey="IdPaciente")]
		public EntitySet<OdontogramaPieza> OdontogramaPieza
		{
			get
			{
				return this._OdontogramaPieza;
			}
			set
			{
				this._OdontogramaPieza.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_Receta", Storage="_Receta", ThisKey="IdPaciente", OtherKey="IdPaciente")]
		public EntitySet<Receta> Receta
		{
			get
			{
				return this._Receta;
			}
			set
			{
				this._Receta.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_TratamientoPaciente", Storage="_TratamientoPaciente", ThisKey="IdPaciente", OtherKey="IdPaciente")]
		public EntitySet<TratamientoPaciente> TratamientoPaciente
		{
			get
			{
				return this._TratamientoPaciente;
			}
			set
			{
				this._TratamientoPaciente.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Alergias(Alergias entity)
		{
			this.SendPropertyChanging();
			entity.Paciente = this;
		}
		
		private void detach_Alergias(Alergias entity)
		{
			this.SendPropertyChanging();
			entity.Paciente = null;
		}
		
		private void attach_Enfermedades(Enfermedades entity)
		{
			this.SendPropertyChanging();
			entity.Paciente = this;
		}
		
		private void detach_Enfermedades(Enfermedades entity)
		{
			this.SendPropertyChanging();
			entity.Paciente = null;
		}
		
		private void attach_Factura(Factura entity)
		{
			this.SendPropertyChanging();
			entity.Paciente = this;
		}
		
		private void detach_Factura(Factura entity)
		{
			this.SendPropertyChanging();
			entity.Paciente = null;
		}
		
		private void attach_OdontogramaPieza(OdontogramaPieza entity)
		{
			this.SendPropertyChanging();
			entity.Paciente = this;
		}
		
		private void detach_OdontogramaPieza(OdontogramaPieza entity)
		{
			this.SendPropertyChanging();
			entity.Paciente = null;
		}
		
		private void attach_Receta(Receta entity)
		{
			this.SendPropertyChanging();
			entity.Paciente = this;
		}
		
		private void detach_Receta(Receta entity)
		{
			this.SendPropertyChanging();
			entity.Paciente = null;
		}
		
		private void attach_TratamientoPaciente(TratamientoPaciente entity)
		{
			this.SendPropertyChanging();
			entity.Paciente = this;
		}
		
		private void detach_TratamientoPaciente(TratamientoPaciente entity)
		{
			this.SendPropertyChanging();
			entity.Paciente = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Receta")]
	public partial class Receta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdReceta;
		
		private int _IdPaciente;
		
		private EntitySet<RecetaMedicamento> _RecetaMedicamento;
		
		private EntityRef<Paciente> _Paciente;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecetaChanging(int value);
    partial void OnIdRecetaChanged();
    partial void OnIdPacienteChanging(int value);
    partial void OnIdPacienteChanged();
    #endregion
		
		public Receta()
		{
			this._RecetaMedicamento = new EntitySet<RecetaMedicamento>(new Action<RecetaMedicamento>(this.attach_RecetaMedicamento), new Action<RecetaMedicamento>(this.detach_RecetaMedicamento));
			this._Paciente = default(EntityRef<Paciente>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdReceta", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdReceta
		{
			get
			{
				return this._IdReceta;
			}
			set
			{
				if ((this._IdReceta != value))
				{
					this.OnIdRecetaChanging(value);
					this.SendPropertyChanging();
					this._IdReceta = value;
					this.SendPropertyChanged("IdReceta");
					this.OnIdRecetaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPaciente", DbType="Int NOT NULL")]
		public int IdPaciente
		{
			get
			{
				return this._IdPaciente;
			}
			set
			{
				if ((this._IdPaciente != value))
				{
					if (this._Paciente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPacienteChanging(value);
					this.SendPropertyChanging();
					this._IdPaciente = value;
					this.SendPropertyChanged("IdPaciente");
					this.OnIdPacienteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Receta_RecetaMedicamento", Storage="_RecetaMedicamento", ThisKey="IdReceta", OtherKey="IdReceta")]
		public EntitySet<RecetaMedicamento> RecetaMedicamento
		{
			get
			{
				return this._RecetaMedicamento;
			}
			set
			{
				this._RecetaMedicamento.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_Receta", Storage="_Paciente", ThisKey="IdPaciente", OtherKey="IdPaciente", IsForeignKey=true)]
		public Paciente Paciente
		{
			get
			{
				return this._Paciente.Entity;
			}
			set
			{
				Paciente previousValue = this._Paciente.Entity;
				if (((previousValue != value) 
							|| (this._Paciente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Paciente.Entity = null;
						previousValue.Receta.Remove(this);
					}
					this._Paciente.Entity = value;
					if ((value != null))
					{
						value.Receta.Add(this);
						this._IdPaciente = value.IdPaciente;
					}
					else
					{
						this._IdPaciente = default(int);
					}
					this.SendPropertyChanged("Paciente");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RecetaMedicamento(RecetaMedicamento entity)
		{
			this.SendPropertyChanging();
			entity.Receta = this;
		}
		
		private void detach_RecetaMedicamento(RecetaMedicamento entity)
		{
			this.SendPropertyChanging();
			entity.Receta = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecetaMedicamento")]
	public partial class RecetaMedicamento : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecetaMedicamento;
		
		private int _IdReceta;
		
		private int _IdIdMedicamento;
		
		private EntityRef<Medicamento> _Medicamento;
		
		private EntityRef<Receta> _Receta;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecetaMedicamentoChanging(int value);
    partial void OnIdRecetaMedicamentoChanged();
    partial void OnIdRecetaChanging(int value);
    partial void OnIdRecetaChanged();
    partial void OnIdIdMedicamentoChanging(int value);
    partial void OnIdIdMedicamentoChanged();
    #endregion
		
		public RecetaMedicamento()
		{
			this._Medicamento = default(EntityRef<Medicamento>);
			this._Receta = default(EntityRef<Receta>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecetaMedicamento", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecetaMedicamento
		{
			get
			{
				return this._IdRecetaMedicamento;
			}
			set
			{
				if ((this._IdRecetaMedicamento != value))
				{
					this.OnIdRecetaMedicamentoChanging(value);
					this.SendPropertyChanging();
					this._IdRecetaMedicamento = value;
					this.SendPropertyChanged("IdRecetaMedicamento");
					this.OnIdRecetaMedicamentoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdReceta", DbType="Int NOT NULL")]
		public int IdReceta
		{
			get
			{
				return this._IdReceta;
			}
			set
			{
				if ((this._IdReceta != value))
				{
					if (this._Receta.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRecetaChanging(value);
					this.SendPropertyChanging();
					this._IdReceta = value;
					this.SendPropertyChanged("IdReceta");
					this.OnIdRecetaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdIdMedicamento", DbType="Int NOT NULL")]
		public int IdIdMedicamento
		{
			get
			{
				return this._IdIdMedicamento;
			}
			set
			{
				if ((this._IdIdMedicamento != value))
				{
					if (this._Medicamento.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdIdMedicamentoChanging(value);
					this.SendPropertyChanging();
					this._IdIdMedicamento = value;
					this.SendPropertyChanged("IdIdMedicamento");
					this.OnIdIdMedicamentoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicamento_RecetaMedicamento", Storage="_Medicamento", ThisKey="IdIdMedicamento", OtherKey="IdMedicamento", IsForeignKey=true)]
		public Medicamento Medicamento
		{
			get
			{
				return this._Medicamento.Entity;
			}
			set
			{
				Medicamento previousValue = this._Medicamento.Entity;
				if (((previousValue != value) 
							|| (this._Medicamento.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicamento.Entity = null;
						previousValue.RecetaMedicamento.Remove(this);
					}
					this._Medicamento.Entity = value;
					if ((value != null))
					{
						value.RecetaMedicamento.Add(this);
						this._IdIdMedicamento = value.IdMedicamento;
					}
					else
					{
						this._IdIdMedicamento = default(int);
					}
					this.SendPropertyChanged("Medicamento");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Receta_RecetaMedicamento", Storage="_Receta", ThisKey="IdReceta", OtherKey="IdReceta", IsForeignKey=true)]
		public Receta Receta
		{
			get
			{
				return this._Receta.Entity;
			}
			set
			{
				Receta previousValue = this._Receta.Entity;
				if (((previousValue != value) 
							|| (this._Receta.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Receta.Entity = null;
						previousValue.RecetaMedicamento.Remove(this);
					}
					this._Receta.Entity = value;
					if ((value != null))
					{
						value.RecetaMedicamento.Add(this);
						this._IdReceta = value.IdReceta;
					}
					else
					{
						this._IdReceta = default(int);
					}
					this.SendPropertyChanged("Receta");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tratamiento")]
	public partial class Tratamiento : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTratamiento;
		
		private string _NombreTratamiento;
		
		private EntitySet<TratamientoFactura> _TratamientoFactura;
		
		private EntitySet<TratamientoPaciente> _TratamientoPaciente;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTratamientoChanging(int value);
    partial void OnIdTratamientoChanged();
    partial void OnNombreTratamientoChanging(string value);
    partial void OnNombreTratamientoChanged();
    #endregion
		
		public Tratamiento()
		{
			this._TratamientoFactura = new EntitySet<TratamientoFactura>(new Action<TratamientoFactura>(this.attach_TratamientoFactura), new Action<TratamientoFactura>(this.detach_TratamientoFactura));
			this._TratamientoPaciente = new EntitySet<TratamientoPaciente>(new Action<TratamientoPaciente>(this.attach_TratamientoPaciente), new Action<TratamientoPaciente>(this.detach_TratamientoPaciente));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTratamiento", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdTratamiento
		{
			get
			{
				return this._IdTratamiento;
			}
			set
			{
				if ((this._IdTratamiento != value))
				{
					this.OnIdTratamientoChanging(value);
					this.SendPropertyChanging();
					this._IdTratamiento = value;
					this.SendPropertyChanged("IdTratamiento");
					this.OnIdTratamientoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NombreTratamiento", DbType="VarChar(100)")]
		public string NombreTratamiento
		{
			get
			{
				return this._NombreTratamiento;
			}
			set
			{
				if ((this._NombreTratamiento != value))
				{
					this.OnNombreTratamientoChanging(value);
					this.SendPropertyChanging();
					this._NombreTratamiento = value;
					this.SendPropertyChanged("NombreTratamiento");
					this.OnNombreTratamientoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tratamiento_TratamientoFactura", Storage="_TratamientoFactura", ThisKey="IdTratamiento", OtherKey="IdTratamiento")]
		public EntitySet<TratamientoFactura> TratamientoFactura
		{
			get
			{
				return this._TratamientoFactura;
			}
			set
			{
				this._TratamientoFactura.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tratamiento_TratamientoPaciente", Storage="_TratamientoPaciente", ThisKey="IdTratamiento", OtherKey="IdTratamiento")]
		public EntitySet<TratamientoPaciente> TratamientoPaciente
		{
			get
			{
				return this._TratamientoPaciente;
			}
			set
			{
				this._TratamientoPaciente.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TratamientoFactura(TratamientoFactura entity)
		{
			this.SendPropertyChanging();
			entity.Tratamiento = this;
		}
		
		private void detach_TratamientoFactura(TratamientoFactura entity)
		{
			this.SendPropertyChanging();
			entity.Tratamiento = null;
		}
		
		private void attach_TratamientoPaciente(TratamientoPaciente entity)
		{
			this.SendPropertyChanging();
			entity.Tratamiento = this;
		}
		
		private void detach_TratamientoPaciente(TratamientoPaciente entity)
		{
			this.SendPropertyChanging();
			entity.Tratamiento = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TratamientoFactura")]
	public partial class TratamientoFactura : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTratamientoFactura;
		
		private int _IdFactura;
		
		private int _IdTratamiento;
		
		private EntityRef<Factura> _Factura;
		
		private EntityRef<Tratamiento> _Tratamiento;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTratamientoFacturaChanging(int value);
    partial void OnIdTratamientoFacturaChanged();
    partial void OnIdFacturaChanging(int value);
    partial void OnIdFacturaChanged();
    partial void OnIdTratamientoChanging(int value);
    partial void OnIdTratamientoChanged();
    #endregion
		
		public TratamientoFactura()
		{
			this._Factura = default(EntityRef<Factura>);
			this._Tratamiento = default(EntityRef<Tratamiento>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTratamientoFactura", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdTratamientoFactura
		{
			get
			{
				return this._IdTratamientoFactura;
			}
			set
			{
				if ((this._IdTratamientoFactura != value))
				{
					this.OnIdTratamientoFacturaChanging(value);
					this.SendPropertyChanging();
					this._IdTratamientoFactura = value;
					this.SendPropertyChanged("IdTratamientoFactura");
					this.OnIdTratamientoFacturaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdFactura", DbType="Int NOT NULL")]
		public int IdFactura
		{
			get
			{
				return this._IdFactura;
			}
			set
			{
				if ((this._IdFactura != value))
				{
					if (this._Factura.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdFacturaChanging(value);
					this.SendPropertyChanging();
					this._IdFactura = value;
					this.SendPropertyChanged("IdFactura");
					this.OnIdFacturaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTratamiento", DbType="Int NOT NULL")]
		public int IdTratamiento
		{
			get
			{
				return this._IdTratamiento;
			}
			set
			{
				if ((this._IdTratamiento != value))
				{
					if (this._Tratamiento.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTratamientoChanging(value);
					this.SendPropertyChanging();
					this._IdTratamiento = value;
					this.SendPropertyChanged("IdTratamiento");
					this.OnIdTratamientoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Factura_TratamientoFactura", Storage="_Factura", ThisKey="IdFactura", OtherKey="IdFactura", IsForeignKey=true)]
		public Factura Factura
		{
			get
			{
				return this._Factura.Entity;
			}
			set
			{
				Factura previousValue = this._Factura.Entity;
				if (((previousValue != value) 
							|| (this._Factura.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Factura.Entity = null;
						previousValue.TratamientoFactura.Remove(this);
					}
					this._Factura.Entity = value;
					if ((value != null))
					{
						value.TratamientoFactura.Add(this);
						this._IdFactura = value.IdFactura;
					}
					else
					{
						this._IdFactura = default(int);
					}
					this.SendPropertyChanged("Factura");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tratamiento_TratamientoFactura", Storage="_Tratamiento", ThisKey="IdTratamiento", OtherKey="IdTratamiento", IsForeignKey=true)]
		public Tratamiento Tratamiento
		{
			get
			{
				return this._Tratamiento.Entity;
			}
			set
			{
				Tratamiento previousValue = this._Tratamiento.Entity;
				if (((previousValue != value) 
							|| (this._Tratamiento.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tratamiento.Entity = null;
						previousValue.TratamientoFactura.Remove(this);
					}
					this._Tratamiento.Entity = value;
					if ((value != null))
					{
						value.TratamientoFactura.Add(this);
						this._IdTratamiento = value.IdTratamiento;
					}
					else
					{
						this._IdTratamiento = default(int);
					}
					this.SendPropertyChanged("Tratamiento");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TratamientoPaciente")]
	public partial class TratamientoPaciente : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTraPaciente;
		
		private int _IdPaciente;
		
		private int _IdTratamiento;
		
		private EntityRef<Paciente> _Paciente;
		
		private EntityRef<Tratamiento> _Tratamiento;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTraPacienteChanging(int value);
    partial void OnIdTraPacienteChanged();
    partial void OnIdPacienteChanging(int value);
    partial void OnIdPacienteChanged();
    partial void OnIdTratamientoChanging(int value);
    partial void OnIdTratamientoChanged();
    #endregion
		
		public TratamientoPaciente()
		{
			this._Paciente = default(EntityRef<Paciente>);
			this._Tratamiento = default(EntityRef<Tratamiento>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTraPaciente", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdTraPaciente
		{
			get
			{
				return this._IdTraPaciente;
			}
			set
			{
				if ((this._IdTraPaciente != value))
				{
					this.OnIdTraPacienteChanging(value);
					this.SendPropertyChanging();
					this._IdTraPaciente = value;
					this.SendPropertyChanged("IdTraPaciente");
					this.OnIdTraPacienteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPaciente", DbType="Int NOT NULL")]
		public int IdPaciente
		{
			get
			{
				return this._IdPaciente;
			}
			set
			{
				if ((this._IdPaciente != value))
				{
					if (this._Paciente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPacienteChanging(value);
					this.SendPropertyChanging();
					this._IdPaciente = value;
					this.SendPropertyChanged("IdPaciente");
					this.OnIdPacienteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTratamiento", DbType="Int NOT NULL")]
		public int IdTratamiento
		{
			get
			{
				return this._IdTratamiento;
			}
			set
			{
				if ((this._IdTratamiento != value))
				{
					if (this._Tratamiento.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTratamientoChanging(value);
					this.SendPropertyChanging();
					this._IdTratamiento = value;
					this.SendPropertyChanged("IdTratamiento");
					this.OnIdTratamientoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_TratamientoPaciente", Storage="_Paciente", ThisKey="IdPaciente", OtherKey="IdPaciente", IsForeignKey=true)]
		public Paciente Paciente
		{
			get
			{
				return this._Paciente.Entity;
			}
			set
			{
				Paciente previousValue = this._Paciente.Entity;
				if (((previousValue != value) 
							|| (this._Paciente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Paciente.Entity = null;
						previousValue.TratamientoPaciente.Remove(this);
					}
					this._Paciente.Entity = value;
					if ((value != null))
					{
						value.TratamientoPaciente.Add(this);
						this._IdPaciente = value.IdPaciente;
					}
					else
					{
						this._IdPaciente = default(int);
					}
					this.SendPropertyChanged("Paciente");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tratamiento_TratamientoPaciente", Storage="_Tratamiento", ThisKey="IdTratamiento", OtherKey="IdTratamiento", IsForeignKey=true)]
		public Tratamiento Tratamiento
		{
			get
			{
				return this._Tratamiento.Entity;
			}
			set
			{
				Tratamiento previousValue = this._Tratamiento.Entity;
				if (((previousValue != value) 
							|| (this._Tratamiento.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tratamiento.Entity = null;
						previousValue.TratamientoPaciente.Remove(this);
					}
					this._Tratamiento.Entity = value;
					if ((value != null))
					{
						value.TratamientoPaciente.Add(this);
						this._IdTratamiento = value.IdTratamiento;
					}
					else
					{
						this._IdTratamiento = default(int);
					}
					this.SendPropertyChanged("Tratamiento");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Usuario")]
	public partial class Usuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdUsuario;
		
		private string _Nombre;
		
		private string _Apellido;
		
		private string _UserName;
		
		private string _Clave;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdUsuarioChanging(int value);
    partial void OnIdUsuarioChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnApellidoChanging(string value);
    partial void OnApellidoChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnClaveChanging(string value);
    partial void OnClaveChanged();
    #endregion
		
		public Usuario()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUsuario", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdUsuario
		{
			get
			{
				return this._IdUsuario;
			}
			set
			{
				if ((this._IdUsuario != value))
				{
					this.OnIdUsuarioChanging(value);
					this.SendPropertyChanging();
					this._IdUsuario = value;
					this.SendPropertyChanged("IdUsuario");
					this.OnIdUsuarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(50)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apellido", DbType="VarChar(50)")]
		public string Apellido
		{
			get
			{
				return this._Apellido;
			}
			set
			{
				if ((this._Apellido != value))
				{
					this.OnApellidoChanging(value);
					this.SendPropertyChanging();
					this._Apellido = value;
					this.SendPropertyChanged("Apellido");
					this.OnApellidoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clave", DbType="VarChar(50)")]
		public string Clave
		{
			get
			{
				return this._Clave;
			}
			set
			{
				if ((this._Clave != value))
				{
					this.OnClaveChanging(value);
					this.SendPropertyChanging();
					this._Clave = value;
					this.SendPropertyChanged("Clave");
					this.OnClaveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
